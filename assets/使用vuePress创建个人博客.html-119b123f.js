import{_ as p,M as i,p as l,q as o,R as n,t as s,N as e,a1 as t}from"./framework-204010b2.js";const c="/note/assets/image-20230214165625271-556ffce6.png",u="/note/assets/image-20230214170501135-6b1c8782.png",r="/note/assets/image-20230214174322323-b8d6449f.png",d={},k={href:"https://vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>因为想使用 vue3 + vite 搭建，所以这里使用 2.x 版本的 vuePress</p><h2 id="创建模板" tabindex="-1"><a class="header-anchor" href="#创建模板" aria-hidden="true">#</a> 创建模板</h2><p>官方文档的所有操作都是在 linux 系统下进行的，有些指令并不相同</p><ol><li><p>首先创建一个文件夹，名字就是项目名字</p></li><li><p>使用 yarn 命令初始化一个 package.json</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> init <span class="token comment"># npm使用 npm init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装 vuePress 依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> vuepress@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 package.json 中的 scripts 节点下添加指令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 本地运行</span>
    <span class="token property">&quot;docs:build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span> <span class="token comment">// build</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <strong>git init</strong> 初始化 git,将 node_models, .temp, .cache 文件加入 .ignore 问价中</p><div class="language-.ignore line-numbers-mode" data-ext=".ignore"><pre class="language-.ignore"><code>node_modules
.temp
.cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基本的项目结构是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─ docs
│  ├─ .vuepress
│  │  └─ config.js / config.ts
│  └─ README.md
├─ .gitignore
└─ package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中如果你想使用 ts ,可以创建 config.ts,并导入 <strong>defineUserConfig</strong> ，可以有 ts 的类型检查</p></li><li><p>我这里使用了 ts, config.ts 基本结构是这样的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  lang<span class="token operator">:</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span>
  title<span class="token operator">:</span> <span class="token string">&#39;MY NOTES&#39;</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">&#39;我的个人博客&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>我们在 docs 下创建一个文件夹，例如 front/java 来存放我们的 markdown 文件，里面的默认路由是 README.md</p><p>不同的文件夹就对应不同的路由地址，比如：</p><p>docs/web --&gt; http://localhost:8080/web/</p><p>docs/java --&gt; http://localhost:8080/java</p><p>这样一个基本的样子就有了</p><h2 id="起始页" tabindex="-1"><a class="header-anchor" href="#起始页" aria-hidden="true">#</a> 起始页</h2><p>那么像官网那样的起始页如何设置呢？</p><p>我们项目的根目录/docs 同级下有一个 README.md,可以将这个文件设置为项目的首页</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">home</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">heroImage</span><span class="token punctuation">:</span> /test.png
<span class="token key atrule">heroText</span><span class="token punctuation">:</span> Welcome to my notes
<span class="token key atrule">tagline</span><span class="token punctuation">:</span> 🛻🛻🛻🛻
<span class="token key atrule">actions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">text</span><span class="token punctuation">:</span> ↙ 前端相关
    <span class="token key atrule">link</span><span class="token punctuation">:</span> /web/vite + vue + electron 简单环境搭建.md
    <span class="token key atrule">type</span><span class="token punctuation">:</span> secondary
  <span class="token punctuation">-</span> <span class="token key atrule">text</span><span class="token punctuation">:</span> java相关 ↘
    <span class="token key atrule">link</span><span class="token punctuation">:</span> /java/端口占用解决办法.md
    <span class="token key atrule">type</span><span class="token punctuation">:</span> secondary
<span class="token key atrule">features</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> 前端相关
    <span class="token key atrule">details</span><span class="token punctuation">:</span> 应该多数为vue相关的知识，记录bug，记录有趣的东西，但是目前丢失了大部分笔记，只能慢慢来
  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> java相关
    <span class="token key atrule">details</span><span class="token punctuation">:</span> 学习spring等东西记录的一些概念，以及一些容易忘的解决问题的方法
<span class="token key atrule">footer</span><span class="token punctuation">:</span> 积跬步 至千里</span>
<span class="token punctuation">---</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>home: 是否开启首页</p><p>homeImage: 首页图片</p><p>heroText: 分割线上方文字</p><p>tagline: 分割线</p><p>actions:</p><p>-text: 开始按钮文字，actions 可以有多个</p><p>-link: 链接的文章</p><p>-type: 可选值有 primary / secondary 即为实心和空心的按钮</p><p>features:</p><p>-title: 底部 features 的标题，features 可以有多个</p><p>-details: features 具体描述</p>`,24),m={href:"https://v2.vuepress.vuejs.org/zh/reference/default-theme/frontmatter.html#%E9%A6%96%E9%A1%B5",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>路由，navBar 等等配置都可以在官方文档中找到，这里不过多赘述</p><h2 id="部署到-github-pages" tabindex="-1"><a class="header-anchor" href="#部署到-github-pages" aria-hidden="true">#</a> 部署到 github pages</h2><p>首先在 github 创建一个仓库，将本地的代码上传到这个仓库，注意 github 分支默认名字叫做 main，gitee 叫做 master,所以首次 push 命令应该是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们要使用 github actions 实现每次 push 操作都自动部署到 github pages 上</p><h3 id="配置-personal-access-token" tabindex="-1"><a class="header-anchor" href="#配置-personal-access-token" aria-hidden="true">#</a> 配置 personal access token</h3><p>点击右上角头像，点击 settings --&gt; developer settings --&gt; personal access token --&gt; tokens (classify) 中添加一个新的 token，</p><p><img src="`+c+'" alt="image-20230214165625271"></p><p>最后点击 Generate token 生成 token ,将 token 复制下来，后面要用（token 跟密码一样重要，请不要泄露）</p><h3 id="将-token-设置到项目中的-secrets-中" tabindex="-1"><a class="header-anchor" href="#将-token-设置到项目中的-secrets-中" aria-hidden="true">#</a> 将 token 设置到项目中的 secrets 中</h3><p>我们打开 github 项目，点击项目的 settings --&gt; Secrets and variables --&gt; actions --&gt; New repository secret</p><p><img src="'+u+`" alt="image-20230214170501135"></p><p>nane 填 ACCESS_TOKEN， value 添你刚刚复制的 access token</p><h3 id="部署前项目的修改" tabindex="-1"><a class="header-anchor" href="#部署前项目的修改" aria-hidden="true">#</a> 部署前项目的修改</h3><p>如果你想将页面配置到 https://(你的 github 名称).github.io/(你指定的路径)/ 下，需要在 config.ts / config.js 中加入 base 属性，指定 base 属性，如果直接部署到 https://(你的 github 名称).github.io/,则不用配置，因为默认就是 / ， 记得将修改 push 到仓库</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  lang<span class="token operator">:</span> <span class="token string">&#39;zh-CN&#39;</span><span class="token punctuation">,</span>
  title<span class="token operator">:</span> <span class="token string">&#39;MY NOTES&#39;</span><span class="token punctuation">,</span>
  base<span class="token operator">:</span> <span class="token string">&#39;/你指定的路径/&#39;</span><span class="token punctuation">,</span>
  description<span class="token operator">:</span> <span class="token string">&#39;我的个人博客&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-github-actions" tabindex="-1"><a class="header-anchor" href="#配置-github-actions" aria-hidden="true">#</a> 配置 GitHub actions</h3><p>接下来到仓库中点击 actions 新建一个 workflow,填写以下 yml 格式配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Deploy
<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> vuepress<span class="token punctuation">-</span>deploy
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> jenkey2011/vuepress<span class="token punctuation">-</span>deploy@master
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">TARGET_REPO</span><span class="token punctuation">:</span> 你的github用户名/你的仓库名
          <span class="token key atrule">TARGET_BRANCH</span><span class="token punctuation">:</span> gh_pages
          <span class="token key atrule">BUILD_SCRIPT</span><span class="token punctuation">:</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global <span class="token punctuation">-</span><span class="token punctuation">-</span>add safe.directory &quot;<span class="token important">*&quot;</span> <span class="token important">&amp;&amp;</span> yarn <span class="token important">&amp;&amp;</span> yarn docs<span class="token punctuation">:</span>build
          <span class="token key atrule">BUILD_DIR</span><span class="token punctuation">:</span> docs/.vuepress/dist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他的原理就是将你的代码拉取到一个 ubuntu 系统上，选用 node 环境，新建一个 gh_pages 分支，将 build 好的你的项目推送到你的分支上，接下来这个分支就可以当作你 githubpages 的首页进行展示了。</p><h3 id="配置-github-pages" tabindex="-1"><a class="header-anchor" href="#配置-github-pages" aria-hidden="true">#</a> 配置 GitHub pages</h3><p>接下来点击你项目的 settings --&gt; pages 按照图中的配置，等部署好后，点击 Visit site 就可以看到你的博客了</p><p><img src="`+r+'" alt="image-20230214174322323"></p><p>恭喜你，完成了博客在 GitHub pages 的部署</p>',24);function b(h,y){const a=i("ExternalLinkIcon");return l(),o("div",null,[n("p",null,[n("a",k,[s("vuePress 官方文档地址 👈"),e(a)])]),v,n("p",null,[s("更多的首页配置，请参考： "),n("a",m,[s("官方文档首页配置 👈"),e(a)])]),g])}const _=p(d,[["render",b],["__file","使用vuePress创建个人博客.html.vue"]]);export{_ as default};
