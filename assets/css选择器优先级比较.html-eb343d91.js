import{_ as o,M as r,p as i,q as n,R as e,t as a,N as l,a1 as s}from"./framework-204010b2.js";const c={},d=s('<h2 id="css选择器类型被分为三大类-优先级依此递减" tabindex="-1"><a class="header-anchor" href="#css选择器类型被分为三大类-优先级依此递减" aria-hidden="true">#</a> css选择器类型被分为三大类(优先级依此递减)：</h2><ol><li>ID选择器（#myid）</li><li>类选择器、属性选择器、伪类（.myclassname、[name=&quot;myName&quot;]、:hover）</li><li>标签选择器、伪元素选择器（div、::before）</li></ol><p>通配选择器（*）关系选择器（+、&gt;、~、&quot; &quot;、||）和 否定伪类（:not()）对优先级没有影响。（但是，在 :not() <strong>内部声明的选择器会影响优先级</strong>）。</p><h2 id="优先级关系" tabindex="-1"><a class="header-anchor" href="#优先级关系" aria-hidden="true">#</a> 优先级关系：</h2><ol><li>内联样式（style 属性）&gt; 嵌入样式（id选择器、class选择器）&gt; 外部样式（class选择器、标签选择器）</li><li>优先级就近原则，同权重情况下样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li></ol><h2 id="优先级规则" tabindex="-1"><a class="header-anchor" href="#优先级规则" aria-hidden="true">#</a> 优先级规则：</h2><ol><li>优先级为: ID选择器 &gt; 类选择器/属性选择器/伪类选择器 &gt; 标签选择器/伪元素选择器</li><li>继承的样式没有优先级</li><li>比较优先级时，需要将所有的选择器转换为同一类型再比较优先级，如果转换后优先级相同，则按照源码顺序来确定</li></ol><h1 id="important-例外规则" tabindex="-1"><a class="header-anchor" href="#important-例外规则" aria-hidden="true">#</a> !important 例外规则</h1><p>当在一个样式声明中使用一个 !important 规则时，此声明将覆盖任何其他声明。虽然，从技术上讲，!important 与优先级无关，但它与最终的结果直接相关。使用 !important 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找 bug 变得更加困难了。当两条相互冲突的带有 !important 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。</p>',9),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity#%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%9A%84%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"};function _(p,m){const t=r("ExternalLinkIcon");return i(),n("div",null,[d,e("p",null,[a("官方文档地址： "),e("a",h,[a("优先级是如何计算的"),l(t)])])])}const u=o(c,[["render",_],["__file","css选择器优先级比较.html.vue"]]);export{u as default};
